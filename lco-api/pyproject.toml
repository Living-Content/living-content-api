[project]
name = "lco-api"
version = "0.1.0"
description = "Living Content API management CLI"
requires-python = ">=3.11"
dependencies = [
    "clicycle>=3.0.0",
    "click>=8.1.0",
    "pyyaml>=6.0",
    "requests>=2.31.0",
    "google-cloud-firestore>=2.11.0",
    "google-cloud-secret-manager>=2.16.0",
    "cryptography>=41.0.0",
    "pyjwt>=2.8.0",
    "python-dotenv>=1.0.0",
    "rich>=13.0.0",
    "pydantic>=2.11.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-cov>=5.0.0",
    "pytest-asyncio>=0.24.0",
    "ruff>=0.8.0",
    "mypy>=1.13.0",
    "types-requests>=2.32.0",
    "types-pyyaml>=6.0.0",
]

[project.scripts]
lco-api = "cli.main:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/cli", "src/services", "src/models", "src/utils"]

[tool.ruff]
target-version = "py311"
line-length = 88
exclude = [
    ".venv",
    "migrations",
    "__pycache__",
    "build",
    "dist",
]

[tool.ruff.lint]
select = [
    "F",    # pyflakes
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "I",    # isort
    "B",    # flake8-bugbear
    "UP",   # pyupgrade
    "S",    # bandit security checks
    "T20",  # flake8-print
    "C90",  # McCabe complexity
    "N",    # pep8-naming
    "A",    # flake8-builtins
    "ARG",  # flake8-unused-arguments
    "PTH",  # flake8-use-pathlib
    "RET",  # flake8-return
    "SIM",  # flake8-simplify
    "TCH",  # flake8-type-checking
    "ANN",  # flake8-annotations
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "B008",  # do not perform function calls in argument defaults
    "S101",  # use of assert
    "ANN101",  # missing type annotation for self
    "ANN102",  # missing type annotation for cls
    "ANN401",  # dynamically typed expressions (Any)
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "ARG"]
"src/cli/*" = ["T20"]  # Allow print in CLI

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_unimported = true
no_implicit_optional = true
check_untyped_defs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
addopts = "-ra -q --strict-markers"

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/__pycache__/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]