# Docker Compose Template for Living Content API
# This file is generated by lco-api from project configuration
# DO NOT EDIT DIRECTLY - use 'lco-api docker generate' to regenerate
#
# - TLS/SSL for all internal communication
# - Health checks for all services
# - Resource limits to prevent memory leaks
# - Named volumes for data persistence
# - Read-only root filesystems where possible
# - Non-root users for containers
# - Isolated internal network

name: ${PROJECT_NAME}

services:
  mongo:
    image: ${MONGO_IMAGE}
    container_name: ${PROJECT_NAME}-mongo
    restart: unless-stopped
    networks:
      - internal
    ports:
      - "127.0.0.1:27017:27017"  # Bind only to localhost
    volumes:
      - mongo-data:/data/db
      - mongo-config:/data/configdb
      - ./ssl:/ssl:ro
    environment:
      MONGO_INITDB_DATABASE: ${MONGO_DB_NAME}
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 512M
    command: >
      mongod
      --tlsMode requireTLS
      --tlsCertificateKeyFile /ssl/shared/shared.pem
      --tlsCAFile /ssl/ca/ca.crt
      --bind_ip_all
    healthcheck:
      test: ["CMD", "mongosh", "--tls", "--tlsCAFile", "/ssl/ca/ca.crt", "--tlsCertificateKeyFile", "/ssl/shared/shared.pem", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: ${REDIS_IMAGE}
    container_name: ${PROJECT_NAME}-redis
    restart: unless-stopped
    networks:
      - internal
    ports:
      - "127.0.0.1:6379:6379"  # Bind only to localhost
    volumes:
      - redis-data:/data
      - ./ssl:/ssl:ro
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 128M
    command: >
      redis-server
      --tls-port 6379
      --port 0
      --tls-cert-file /ssl/shared/shared.crt
      --tls-key-file /ssl/shared/shared.key
      --tls-ca-cert-file /ssl/ca/ca.crt
      --tls-auth-clients yes
    healthcheck:
      test: ["CMD", "redis-cli", "--tls", "--cert", "/ssl/shared/shared.crt", "--key", "/ssl/shared/shared.key", "--cacert", "/ssl/ca/ca.crt", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    image: ${API_IMAGE}
    container_name: ${PROJECT_NAME}-api
    restart: unless-stopped
    networks:
      - internal
    ports:
      - "127.0.0.1:8000:8000"  # Bind only to localhost
    volumes:
      - ./config:/app/config:ro
      - ./ssl:/app/ssl:ro
      - ./secrets:/app/secrets:ro  # Mount secrets directory
      - api-logs:/app/logs
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 256M
    environment:
      ENV: ${ENVIRONMENT}
      PROJECT_ID: ${PROJECT_ID}
      MONGO_HOST: mongo
      MONGO_PORT: 27017
      REDIS_HOST: redis
      REDIS_PORT: 6379
    depends_on:
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  internal:
    driver: bridge

volumes:
  mongo-data:
  mongo-config:
  redis-data:
  api-logs: